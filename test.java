/*
ข้อสอบที่ 1 Parking Dilemma
หอพักแห่งหนึ่งต้องการจะสร้างหลังคายาวสำหรับลานจอดรถที่มีรถจอดทั้งหมด n คัน โดยที่ลานจอดรถเป็นลานตรงยาวและมีเลขห้องตั้งแต่ห้องแรกถึงห้องสุดท้าย
โดยที่รถของแต่ละห้องจะจอดได้เฉพาะช่องที่เป็นเลขห้องตัวเอง เช่น ห้อง 2 จอดได้แค่ช่องจอดรถหมายเลข 2 เท่านั้น

เจ้าของหอพักไม่มีเงินมากพอที่จะสร้างหลังคาคลุมลานจอดรถทั้งหมด จึงต้องการที่จะสร้างหลังคาที่ยาวติดต่อกันโดยให้คลุมรถอย่างน้อย k คัน

จงหาความยาวของหลังคาที่สั้นที่สุดที่จะสามารถคลุมรถได้ตามกำหนด
ตัวอย่าง
n = 4 จำนวนของรถทั้งหมดที่จอดในลานจอดรถ (มีทั้งหมด 4 คัน)
cars = [6, 1, 12, 7] เลขห้องที่มีรถจอด (มีห้อง 6, 2, 12, 7)
k = 3 จำนวนรถที่ต้องการให้หลังคาคลุม (3 คัน)

จากเลขห้องที่มีรถจอดอยู่ จะเห็นว่าถ้าต้องการสร้างหลังคายาวเพื่อคลุมรถ 3 คัน จะเป็นไปได้ 2 กรณี
1.สร้างหลังคาตั้งแต่ช่อง 2 จนถึงช่อง 7 หลังคาครอบรถห้อง 2, 6, 7 ซึ่งหลังคาจะยาว 6 หน่วย
2.สร้างหลังคาตั้งแต่ช่อง 6 จนถึงช่อง 12 หลังคาครอบรถห้อง 6, 7, 12 ซึ่งหลังคาจะยาว 7 หน่วย

รายละเอียดฟังก์ชั่น
ฟังก์ชั่น carParkingRoof จะรับพารามิเตอร์ดังนี้
1.int cars[n] - array ของเลขช่องจอดรถที่มีรถจอด
2.int k จำนวนของรถที่ต้องการให้หลังคาคลุม
ฟังก์ชั่น carParkingRoof จะรีเทิร์น
1.int m ความยาวหลังคาที่สั้นที่สุดที่จะคลุมรถ k คัน
ข้อจำกัด
1 <= n <= 105
1 <= k <= n
1 <= cars[i] <= 1014
จะไม่มีเลขช่องจอดรถซ้ำกัน

Input
STDIN                   Function
-------                 ----------
4               ->      cars[] size n = 4
2               ->      cars[] = [2, 10, 8, 17]
10
8
17
3               ->      k = 3

Output
9
 */

import java.util.Arrays;

public class test {
    public static int carParkingRoof(int[] cars, int k) {
        Arrays.sort(cars);
        int minRoofLength = Integer.MAX_VALUE;
        int n = cars.length;
        for (int i = 0; i <= n - k; i++) {
            minRoofLength = Math.min(minRoofLength, cars[i + k - 1] - cars[i] + 1);
        }
        return minRoofLength;
    }

    public static void main(String[] args) {
        int[] cars = {2, 10, 8, 17};
        int k = 3;
        int minRoofLength = carParkingRoof(cars, k);
        System.out.println(minRoofLength);
    }
}
/*
นี่คือรายละเอียดของการเปลี่ยนแปลง:

1.เปลี่ยนประเภทพารามิเตอร์ของรถยนต์ในเมธอด carParkingRoof จาก LONG_INTEGER_ARRAY เป็น List<Long> สิ่งนี้ทำให้เราสามารถทำงานกับรายการแทนอาร์เรย์

2.แทนที่ Arrays.sort(cars) ด้วย Collections.sort(cars) เพื่อเรียงลำดับรายการจากน้อยไปหามาก

3.เปลี่ยนประเภทข้อมูลของ minRoofLength เป็น long เพื่อรองรับค่าที่มากขึ้น

4.แทนที่รถยนต์[i + k - 1] ด้วย cars.get(i + k - 1) และรถยนต์[i] ด้วย cars.get(i) เพื่อเข้าถึงองค์ประกอบของรายการ

5.ในเมธอดหลัก ให้เปลี่ยนการเริ่มต้นของรถยนต์เพื่อใช้ Arrays.asList เพื่อสร้างรายการค่าแบบยาว

ด้วยการเปลี่ยนแปลงเหล่านี้ รหัสควรทำงานได้อย่างถูกต้อง โดยจะจัดเรียงรายการรถยนต์ คำนวณความยาวหลังคาขั้นต่ำ และพิมพ์ผลลัพธ์
 */